[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pocker_cards",
    "section": "",
    "text": "A sample of playing cards based on ideas from Think Python Second Edition by Allen B Downey"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Pocker_cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev-cards\nor\nconda install -c fastai nbdev-cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Pocker_cards",
    "section": "How to use",
    "text": "How to use\nThis library provides a class you can use to create, compare and display playing cards\n\nCard(1,3)\n\n3♦\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♥', '♦', '♣', '♠']\n\n\n                                   Deep Conclucions"
  },
  {
    "objectID": "cards.html",
    "href": "cards.html",
    "title": "Card — Playing Cards",
    "section": "",
    "text": "Positional indices will be used to represent playing card clubs and ranks. These are the suits:\nFor instance at position ‘0’\nAnd these are the ranks:\nNote that there is no rank at ‘0’ and that is why we use None since we are using indices as the positions. For instance at position ‘1’ we have:\nsource"
  },
  {
    "objectID": "cards.html#comparison-of-operators",
    "href": "cards.html#comparison-of-operators",
    "title": "Card — Playing Cards",
    "section": "Comparison of operators",
    "text": "Comparison of operators\nEquality, less than and greater than work on the rank and suit indices.\nFor instance, here’s some tests for equality….\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2), Card(suit=1, rank=3))\n\n… and a test of < …\n\nassert Card(suit=1, rank=3)<Card(suit=2, rank=3)\n\n… and finally a test of >.\n\nassert Card(suit=3, rank=3)>Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3)>Card(suit=2, rank=3)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards not including jokers\nWhen we initially create a deck, all the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦; A♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣; A♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠\n\n\nThat should be 52 cards\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for the Card\n\nsuits\n\n['♥', '♦', '♣', '♠']\n\n\nTesting whether an ace of diamonds is in the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemoving a card from the deck\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove\n\n\n\n\ntest_eq(deck.pop(), Card(3,13))  #The K♠\n\nThere are 51 cards left in the deck\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemoves a card from the deck or raises exception is its not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\ncard to remove\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\nassert not card23 in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffle the cards in the deck\n\ndef draw_n(n:int, # number of cards tp draw\n           replace:bool=True): # whether pr not to draw with replacement\n    \"\"\"Draw `n` cards, with replacement iif `replace`\"\"\"\n    d = Deck()\n    d.shuffle()\n    if replace: return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]\n    else: return d.cards[:n]\n\n\ndraw_n(13, replace=False)\n\n[A♥, 4♠, 10♦, J♣, 5♥, 2♦, Q♦, 2♠, 6♠, 2♣, 10♣, 10♠, 5♦]"
  }
]